name: Validate and Plan Terraform

on:
  push:
    branches:
      - dev
      - uat
      - prod

permissions:
  id-token: write
  contents: read

jobs:
  validate-and-plan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set ENV Based on Branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/uat" ]]; then
            echo "ENV=uat" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          fi

      - name: Log in to Azure with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Run Terraform Format Check (With Detailed Errors)
        run: |
          echo "Checking Terraform formatting..."
          terraform fmt -recursive -check || {
            echo "‚ùå Formatting issues detected! Run 'terraform fmt -recursive' to fix.";
            terraform fmt -recursive ; # Show what needs fixing
            exit 1;
          }

      - name: Auto-Fix Terraform Formatting Issues (If Needed)
        if: failure()
        run: |
          echo "üîß Auto-fixing Terraform formatting issues..."
          terraform fmt -recursive
          echo "‚úÖ Formatting fixed!"

      - name: Terraform Init with OIDC Authentication
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          BACKEND_FILE="envs/${{ env.ENV }}/backend-${{ env.ENV }}.tfbackend"
          if [ ! -f "$BACKEND_FILE" ]; then
            echo "Backend config file not found: $BACKEND_FILE"
            exit 1
          fi
          terraform init -backend-config="$BACKEND_FILE"

      - name: Validate All Terraform Modules
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: terraform validate || exit 1

      - name: Terraform Plan
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          terraform plan -var-file="envs/${{ env.ENV }}/${{ env.ENV }}.tfvars" -var="image_tag=${{ github.sha }}" -out=tfplan

      - name: Store Terraform Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan