name: Deploy Terraform

on:
  workflow_run:
    workflows: ["Validate and Plan Terraform"]  # Ensures it runs after build success
    types:
      - completed

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}  # Ensure this job runs only if the previous workflow was successful

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Extract Branch Name from Workflow Run
        run: |
          BRANCH_NAME=$(jq -r '.head_branch' <<< '${{ toJson(github.event.workflow_run) }}')
          echo "Branch detected: $BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Set Environment Variables
        run: |
          if [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "uat" ]]; then
            echo "ENV=uat" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "prod" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          else
            echo "❌ Unknown branch: $BRANCH_NAME. Exiting..."
            exit 1
          fi

      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Verify Terraform Version
        run: terraform version

      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: tfplan

      - name: Check Backend and tfvars Files
        run: |
          BACKEND_FILE="envs/$ENV/backend-$ENV.tfbackend"
          TFVARS_FILE="envs/$ENV/$ENV.tfvars"

          if [[ ! -f "$BACKEND_FILE" ]]; then
            echo "❌ Backend config file not found: $BACKEND_FILE"
            exit 1
          fi

          if [[ ! -f "$TFVARS_FILE" ]]; then
            echo "❌ tfvars file not found: $TFVARS_FILE"
            exit 1
          fi

          echo "✅ All required files exist."

      - name: Terraform Init with OIDC Authentication
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: terraform init -backend-config="envs/$ENV/backend-$ENV.tfbackend"

      - name: Apply Terraform Plan
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          echo "Applying Terraform Plan..."
          terraform apply -auto-approve -var-file="envs/$ENV/$ENV.tfvars" tfplan
          echo "✅ Terraform Apply Completed Successfully"