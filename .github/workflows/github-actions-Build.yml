name: Build and Push to ACR

on:
  push:
    branches:
      - dev
      - uat
      - prod

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set ENV Based on Branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/uat" ]]; then
            echo "ENV=uat" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          fi

      - name: Debug - List Terraform Files
        run: ls -R

      - name: Log in to Azure with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
             export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
             terraform init -backend-config=envs/${{ env.ENV }}/backend-${{ env.ENV }}.tfbackend

      - name: Terraform Apply (Plan Only - Debugging)
        run: |
             export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
             terraform plan -var-file="envs/${{ env.ENV }}/${{ env.ENV }}.tfvars" -out=tfplan

      - name: Extract ACR Name from Terraform
        run: |
          ACR_NAME=$(terraform output -raw acr_name || echo "ERROR")
          if [[ "$ACR_NAME" == "ERROR" ]]; then
            echo "Terraform output failed. Exiting."
            exit 1
          fi
          echo "Extracted ACR Name: $ACR_NAME"
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV

      - name: Get ACR Login Server
        run: |
          ACR_LOGIN=$(az acr show --name $ACR_NAME --query loginServer --output tsv || echo "ERROR")
          if [[ "$ACR_LOGIN" == "ERROR" ]]; then
            echo "Failed to retrieve ACR login server. Exiting."
            exit 1
          fi
          echo "ACR Login Server: $ACR_LOGIN"
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN" >> $GITHUB_ENV

      - name: Debug - Check ACR Credentials in Key Vault
        run: |
          echo "Retrieving ACR credentials from Key Vault..."
          az keyvault secret show --name "${{ env.ACR_NAME }}-acr-username" --vault-name my-keyvault || echo "Secret not found"
          az keyvault secret show --name "${{ env.ACR_NAME }}-acr-password" --vault-name my-keyvault || echo "Secret not found"

      - name: Build and Tag Image
        run: |
          echo "Building Docker image..."
          docker build -t $ACR_LOGIN_SERVER/flask-app:${{ github.sha }} -f app/Dockerfile .

      - name: Push Image to ACR
        run: |
          echo "Logging into ACR..."
          az acr login --name $ACR_NAME
          echo "Pushing Docker image..."
          docker push $ACR_LOGIN_SERVER/flask-app:${{ github.sha }}

      - name: Store Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: app/Dockerfile